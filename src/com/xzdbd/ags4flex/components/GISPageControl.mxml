<?xml version="1.0" encoding="utf-8"?>
<!---
	分页组件（适用于空间分析查询QueryTask）.

	@mxml
	<p> 
	下面代码演示如何使用 <code>GISPageControl</code> 类： 
	<p>首先，引用命名空间  <b><code>xmlns:ags="http://www.xzdbd.net/2013/flex/ags"</code></b>，调用如下：</p>
	<pre>
	&lt;ags:GISPageControl
		<b>Properties</b>
		initFunction="{initQuery}"
		updateFunction="{updateQuery}"
		hostComponent="{waterLevelDatagrid}"
		pageCtrlToolsVisible="true"
		pageDetailInfoVisible="true"
		recordIds="{allObjectIds}"
		pageSize="10"
		
		<b>Styles</b> 
		width="100%" /&gt;
	
	其中，<code>initQuery</code> 和 <code>updateQuery</code> 分别是供分页控件内部调用的初始化和更新分页数据源的方法名，<code>allObjectIds</code> 是当前分页控件绑定数据表的所有记录集对应的 ID 集合.
	</pre>
	</p>

	@author 郝超
	创建于 2013-5-10,上午09:19:12.
-->
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  xmlns:xzdbd="com.xzdbd.*" 
		  verticalAlign="middle"
		  width="100%"
		  minHeight="22"
		  gap="0"
		  creationComplete="init()" xmlns:supportClasses="com.xzdbd.ags4flex.components.supportClasses.*" >
	
	<fx:Script>
		<![CDATA[
			import com.xzdbd.ags4flex.components.supportClasses.PageToolBar;
			import mx.collections.ArrayCollection;
			import mx.controls.AdvancedDataGrid;
			import mx.controls.DataGrid;
			import mx.core.UIComponent;
			
			import spark.components.DataGroup;
			
			/**
			 * 正在进行查询的页序号。
			 */
			private var queryingPageIndex:int;
			
			private var _hostComponent:UIComponent;
			private var _pageDetailInfoVisible:Boolean = true;
			private var _pageCtrlToolsVisible:Boolean = true;
			private var _pageSize:int = 5;
			private var _currentPage:int = 1;
			private var _allRecordsCount:int = 0;
			private var _allPagesCount:int = 1;
			private var _initFunction:Function;
			private var _updateFunction:Function;
			private var _dataProvider:ArrayCollection;
			private var _recordIds:Array;

			[Bindable]
			/**
			 * 宿主组件引用，有效类型为 DataGrid、AdvancedDataGrid 和 DataGroup。
			 */
			public function get hostComponent():UIComponent
			{
				return _hostComponent;
			}
			/**
			 * @private
			 */
			public function set hostComponent(value:UIComponent):void
			{
				_hostComponent = value;
			}

			[Bindable]
			/**
			 * 当前分页信息提示是否显示。
			 * @default true
			 */
			public function get pageDetailInfoVisible():Boolean
			{
				return _pageDetailInfoVisible;
			}
			/**
			 * @private
			 */
			public function set pageDetailInfoVisible(value:Boolean):void
			{
				_pageDetailInfoVisible = value;
			}

			[Bindable]
			/**
			 * 当前分页控制按钮是否显示。
			 * @default true
			 */
			public function get pageCtrlToolsVisible():Boolean
			{
				return _pageCtrlToolsVisible;
			}
			/**
			 * @private
			 */
			public function set pageCtrlToolsVisible(value:Boolean):void
			{
				_pageCtrlToolsVisible = value;
			}
			
			[Bindable]
			/**
			 * 分页组件每页显示记录数，默认为 5 。
			 * @default 5
			 */
			public function get pageSize():int
			{
				return _pageSize;
			}
			/**
			 * @private
			 */
			public function set pageSize(value:int):void
			{
				_pageSize = value;
			}

			/**
			 * 分页组件当前页序号（从1开始）。
			 */
			public function get currentPage():int
			{
				return _currentPage;
			}

			/**
			 * 分页组件总记录数。
			 */
			public function get allRecordsCount():int
			{
				return _allRecordsCount;
			}
			
			/**
			 * 分页组件总分页数。
			 */
			public function get allPagesCount():int
			{
				return _allPagesCount;
			}
			
			/**
			 * 分页控件初始化函数，供内部调用，外部只需提供实现而无需调用。
			 */
			public function set initFunction(value:Function):void
			{
				_initFunction = value;
			}
			
			/**
			 * 分页数据更新函数，供内部调用，外部只需提供实现而无需调用。
			 */
			public function set updateFunction(value:Function):void
			{
				_updateFunction = value;
			}
			
			/**
			 * 为当前分页提供的数据源集合，该属性通常是在更新分页数据源的方法(updateFunction)中进行设置。
			 */
			public function set dataProvider(value:ArrayCollection):void
			{
				_dataProvider = value;
				updateDateProvider(_dataProvider);
			}
			
			/**
			 * 当前数据表对象全部记录id集合，该属性通常是在初始化分页组件的方法(initFunction)中进行设置。
			 */
			public function set recordIds(value:Array):void
			{
				_recordIds = value;
				updatePageControlEnable();
				
				//初始化到第一页
				setPage(currentPage);
			}
			
			
			/**
			 * 组件初始化函数，供外部在需要对分页组件进行初始化和重置的时候调用。
			 */
			public function initPageCtrl():void
			{
				_currentPage = 1;
				queryingPageIndex = 1;
				_initFunction();
			}

			/**
			 * 内部初始化。
			 */
			private function init():void
			{
				_currentPage = 1;
				queryingPageIndex = 1;
				if(allRecordsCount > 0)
				{
					_allPagesCount = (allRecordsCount - 1) / pageSize + 1;
				}
				else
				{
					_allPagesCount = 1;
				}
				updatePageControlEnable();
			}
			
			/**
			 * 根据分页序号从 id 集合中截取分页对应 id 。
			 * @param pageIndex 分页页序号。
			 * @return 对应指定页序号的分页数据的 id 集合。
			 */
			private function getIds(pageIndex:int):Array
			{
				var startIndex:int = (pageIndex - 1) * pageSize;
				var curIds:Array = _recordIds.slice(startIndex, startIndex + pageSize);
				
				return curIds;
			}
			
			/**
			 * 设置分页，同时激发新分页的数据更新动作。
			 * @param pageIndex 设置的分页序号。
			 */
			private function setPage(pageIndex:int):void
			{
				if(pageIndex != 0 && pageIndex <= allPagesCount)
				{
					queryingPageIndex = pageIndex;
					_updateFunction(getIds(pageIndex));
				}
			}
			
			/**
			 * 更新分页数据源。
			 * @param source 数据源。
			 */
			private function updateDateProvider(source:ArrayCollection):void
			{
				if(hostComponent is DataGrid)
					(hostComponent as DataGrid).dataProvider = source;
				else if(hostComponent is AdvancedDataGrid)
					(hostComponent as AdvancedDataGrid).dataProvider = source;
				else if(hostComponent is DataGroup)
					(hostComponent as DataGroup).dataProvider = source;
				//更新组件状态
				updatePageControlEnable();
			}
			
			/**
			 * 更新分页组件状态。
			 */
			private function updatePageControlEnable():void
			{
				_currentPage = queryingPageIndex;
				_allRecordsCount = _recordIds ? _recordIds.length : 0;
				if(allRecordsCount > 0)
					_allPagesCount = (allRecordsCount - 1) / pageSize + 1;
				else
					_allPagesCount = 1;
				
				//更新工具条控制按钮状态
				pageToolBar.updateToolBarState(currentPage, allPagesCount);
			}
			
			/**
			 * 分页工具条单击选择事件处理函数。
			 */
			private function pageToolBar_linkClickHandler(event:Event):void
			{
				var action:String = pageToolBar.selectedAction;
				if(action == PageToolBar.FIRST_PAGE)
				{
					setPage(1);
				}
				else if(action == PageToolBar.PRE_PAGE)
				{
					setPage(currentPage - 1);
				}
				else if(action == PageToolBar.NEXT_PAGE)
				{
					setPage(currentPage + 1);
				}
				else if(action == PageToolBar.LAST_PAGE)
				{
					setPage(allPagesCount);
				}
				else
				{
					//指定页跳转
					setPage(int(action)); 
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
	</fx:Declarations>
	
	<s:HGroup visible="{pageDetailInfoVisible}" includeInLayout="{pageDetailInfoVisible}" gap="0">
		<s:Label text="总数："/>
		<s:Label text="{allRecordsCount}" color="0x0000FF"/>
		<s:Label text="条   第" paddingLeft="1"/>
		<s:Label text="{currentPage}" color="0x0000FF"/>
		<s:Label text="页/共"/>
		<s:Label text="{allPagesCount}" color="0x0000FF"/>
		<s:Label text="页"/>
	</s:HGroup>
	<mx:Spacer width="100%" />
	
	<!--- 
		分页控件工具栏，为内部组件。 
		@private
	-->
	<supportClasses:PageToolBar id="pageToolBar"
							 linkClick="pageToolBar_linkClickHandler(event)"
							 visible="{pageCtrlToolsVisible}"
							 includeInLayout="{pageCtrlToolsVisible}"
							 enabled="{allPagesCount > 1}" 
							 width="100%" />
</s:HGroup>





