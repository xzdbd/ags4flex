<?xml version="1.0" encoding="utf-8"?>
<!---
	通用测量工具.

	@mxml
	<p> 
	下面代码演示如何使用 <code>GeneralMeasureTool</code> 类： 
	<p>首先，引用命名空间  <b><code>xmlns:ags="http://www.xzdbd.net/2013/flex/ags"</code></b>，调用如下：</p>
	<pre>
	&lt;ags:GeneralMeasureTool
		<b>Properties</b>
		iconUrl="./images/measureIcon.png"
		map="{map}" /&gt;
	
	其中，map 为地图 Map 的引用.
	</pre>
	</p>

	@author 郝超
	创建于 2013-5-22  下午4:14:08.
-->
<supportClasses:MapToolButton xmlns:fx="http://ns.adobe.com/mxml/2009" 
							  xmlns:s="library://ns.adobe.com/flex/spark" 
							  xmlns:mx="library://ns.adobe.com/flex/mx" 
							  xmlns:esri="http://www.esri.com/2008/ags" 
							  xmlns:flash="flash.text.*"
							  xmlns:supportClasses="com.xzdbd.ags4flex.components.mapTools.supportClasses.*"
							  toolClick="activeDrawTool(event)"
							  iconUrl="{IconAssets.iconClass('measureIcon')}"
							  toolTip="测距" >
	
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.events.MapMouseEvent;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.symbols.PictureMarkerSymbol;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.symbols.TextSymbol;
			import com.esri.ags.tools.DrawTool;
			import com.xzdbd.ags4flex.IconAssets;
			import com.xzdbd.ags4flex.managers.GraphicsLayerManager;
			
			import mx.events.FlexEvent;
			import mx.managers.CursorManager;
			import mx.managers.CursorManagerPriority;
			
			//线样式
			private var lineSymbol:SimpleLineSymbol;
			//绘制测量时的中间节点样式
			private var nodeSymbol:PictureMarkerSymbol;
			//测量结束时出现的清除按钮样式
			private var clearBtnSymbol:PictureMarkerSymbol;
			//测量信息提示文本框样式
			private var toolTipSymbol:TextSymbol;
			
			//绘图工具对象
			private var drawTool:DrawTool;
			
			//绘图工具宿主图层
			private var drawToolGraphicsLayer:GraphicsLayer;
			//绘图信息画布图层
			private var measureSymbolGraphicsLayer:GraphicsLayer;
			
			//随鼠标移动的动态Graphic
			private var dynPointGraphic:Graphic;
			
			//绘制线结束时终点对应的Graphic，用来对应清楚线条的关闭按钮
			private var endPointGraphic:Graphic;
			
			//上一固定转折点
			private var preNodePoint:MapPoint;
			
			//是否开始测距
			private var startMeasure:Boolean;
			//绘图工具是否激活标识
			private var isActivingDrawTool:Boolean;
			
			//测量总距离
			private var totalLength:Number;
			
			//上一转折点与鼠标移动点的距离
			private var dynLength:Number;
			
			
			/**
			 * 重写父类初始化方法。
			 */
			override protected function creationCompleteHandler(event:FlexEvent):void
			{
				lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, 0xfd8044, 1.0, 2);
				nodeSymbol = new PictureMarkerSymbol(IconAssets.iconClass("drawNodeIcon"), 8, 8);
				clearBtnSymbol = new PictureMarkerSymbol(IconAssets.iconClass("clearDrawIcon"), 16, 16, 15);
				
				var textFormat:TextFormat = new TextFormat("宋体", 13, null, false, null, null, null, null, null, 0, 0);
				toolTipSymbol = new TextSymbol("", "", 0x666666, 1.0, true, 0xFF0000, true, 0xFFFFFF, "below", 0, 0, -20, textFormat);
				
				drawToolGraphicsLayer = GraphicsLayerManager.getInstance().createGraphicsLayer("measureToolLayer", map);
				measureSymbolGraphicsLayer = GraphicsLayerManager.getInstance().createGraphicsLayer("measureSymbolLayer", map);
				drawToolGraphicsLayer.autoMoveGraphicsToTop = false;
				measureSymbolGraphicsLayer.autoMoveGraphicsToTop = false;
				
				//绘图对象
				drawTool = new DrawTool(map);
				drawTool.lineSymbol = lineSymbol;
				drawTool.showDrawTips = false;
				
				//实例化特殊点
				dynPointGraphic = new Graphic();
				dynPointGraphic.symbol = toolTipSymbol;
				endPointGraphic = new Graphic();
				endPointGraphic.symbol = clearBtnSymbol;
				endPointGraphic.addEventListener(MouseEvent.CLICK, endGraphicClickHandler);
				endPointGraphic.toolTip = "清除本次操作";
				endPointGraphic.buttonMode = true;
			}
			
			/**
			 * 清除当前测量结果。
			 */
			private function endGraphicClickHandler(event:MouseEvent):void
			{
				resetMeasureTool();
			}
			
			/**
			 * 重置测量工具。
			 */
			private function resetMeasureTool():void
			{
				//参数归零
				totalLength = 0;
				dynLength = 0;
				
				//清空图层
				drawToolGraphicsLayer.clear();
				measureSymbolGraphicsLayer.clear();
				dynPointGraphic.geometry = null;
				endPointGraphic.geometry = null;
				preNodePoint = null;
				startMeasure = false;
			}
			
			/**
			 * 开始测量，激活测量绘制工具。
			 */
			private function activeDrawTool(event:MouseEvent):void
			{
				resetMeasureTool();
				if(isActivingDrawTool)
				{
					drawTool.deactivate();
					drawTool.dispatchEvent(new DrawEvent(DrawEvent.DRAW_END));
					endPointGraphic.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
					return;
				}
				isActivingDrawTool = true;
				
				//设置鼠标样式
				CursorManager.setCursor(IconAssets.iconClass("cursorForLengthMeasure"), CursorManagerPriority.HIGH, -1, -4);
				
				//参数归零
				totalLength = 0;
				dynLength = 0;
				
				//添加绘制完成监听
				drawTool.addEventListener(DrawEvent.DRAW_END, measureDrawEndHandler);
				
				//添加地图单击监听
				map.addEventListener(MapMouseEvent.MAP_CLICK, mapClickHandler);
				
				//添加地图鼠标移动监听
				map.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
				
				//激活绘图工具
				drawTool.activate(DrawTool.POLYLINE);
				
				//添加动态点到图层
				measureSymbolGraphicsLayer.add(dynPointGraphic);
			}
			
			/**
			 * 绘图过程中，地图点击监听函数。
			 */
			private function mapClickHandler(event:MapMouseEvent):void
			{
				//添加转折节点
				var nodeGraphic:Graphic = new Graphic(event.mapPoint, nodeSymbol);
				measureSymbolGraphicsLayer.add(nodeGraphic);
				measureSymbolGraphicsLayer.refresh();
				
				//累加测量长度
				totalLength = totalLength + dynLength;
				dynLength = 0;
				
				//存储当前固定节点
				preNodePoint = event.mapPoint;
				
				//仅当第一次按下鼠标时添加监听
				if(totalLength == 0 && dynLength == 0)
				{
					//开始测量
					startMeasure = true;
				}
			}
			
			/**
			 * 测量期间，鼠标移动监听事件。
			 */
			private function mouseMoveHandler(event:MouseEvent):void
			{
				var curPoint:MapPoint = map.toMapFromStage(event.stageX, event.stageY);
				if(startMeasure)
				{
					if(preNodePoint)
					{
						dynLength = calculateDistance(preNodePoint, curPoint);
						var result:Object = updateMeasureResult(totalLength + dynLength);
						
						//更新测量结果动态显示窗TextSymbol的空间位置和文本内容
						updateDynDataTip(curPoint, "总长：<b><font color='#fd8044'>" + result.length + "</font></b>" + result.unit + "<br>单击确定节点，双击结束");
					}
				}
				else
				{
					//更新标签
					updateDynDataTip(curPoint, "单击确定起点");
				}
			}
			
			/**
			 * 测量绘制结束处理函数。
			 */
			private function measureDrawEndHandler(event:DrawEvent):void
			{
				//移除监听
				drawTool.removeEventListener(DrawEvent.DRAW_END, measureDrawEndHandler);
				map.removeEventListener(MapMouseEvent.MAP_CLICK, mapClickHandler);
				map.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
				
				//注销绘图工具
				drawTool.deactivate();
				isActivingDrawTool = false;
				
				//清除鼠标样式
				CursorManager.removeAllCursors();
				
				//添加绘制线条到地图图层
				var graphic:Graphic = event.graphic;
				if(graphic)
				{
					drawToolGraphicsLayer.add(graphic);
					
					//更新图层上绘制线条终点位置和符号
					var polyline:Polyline = graphic.geometry as Polyline;
					var endPoint:MapPoint = polyline.paths[0][Number(polyline.paths[0].length)-1] as MapPoint;
					endPointGraphic.geometry = endPoint;
					measureSymbolGraphicsLayer.refresh();
					
					//更新结果提示
					var result:Object = updateMeasureResult(totalLength + dynLength);
					updateDynDataTip(endPoint, "总长：<b><font color='#fd8044'>" + result.length + "</font></b>" + result.unit);
					
					//添加终点（关闭按钮）到图层
					measureSymbolGraphicsLayer.add(endPointGraphic);
				}
			}
			
			/**
			 * 更新测量结果。
			 * @param totalLength 测量的总长度。
			 * @return 返回一个包含测量长度的数值以及相应度量单位的对象，格式为 {length: *, unit: *}。
			 */
			private function updateMeasureResult(totalLength:Number):Object
			{
				//格式化字符串显示
				var unitStr:String = "米";
				var tmpTotalLength:Number = Number(totalLength.toFixed(1));
				if(tmpTotalLength > 1000)
				{
					tmpTotalLength = Number((tmpTotalLength/1000).toFixed(3));
					unitStr = "千米";
				}
				var resultObj:Object = {length: tmpTotalLength, unit: unitStr};
				
				return resultObj
			}
			
			/**
			 * 更新动态鼠标跟随提示标签。
			 * @param point 最新鼠标点击的坐标点。
			 * @param htmlText 当前需要更新的文本提示框文本信息。
			 */
			private function updateDynDataTip(point:MapPoint=null, htmlText:String=""):void
			{
				if(point)
				{
					toolTipSymbol.htmlText = htmlText;
					dynPointGraphic.geometry = point;
					dynPointGraphic.symbol = toolTipSymbol;
					measureSymbolGraphicsLayer.refresh();
				}
				else
				{
					measureSymbolGraphicsLayer.remove(dynPointGraphic);
				}
			}
			
			/**
			 * 计算两点间距离（仅适用于平面坐标量算）。
			 * @param startPoint 地图上的起点坐标。
			 * @param endPoint 地图上的终点坐标。
			 */
			private function calculateDistance(startPoint:MapPoint, endPoint:MapPoint):Number
			{
				var deltaX:Number = Math.abs(endPoint.x-startPoint.x);
				var deltaY:Number = Math.abs(endPoint.y-startPoint.y);
				var distance:Number = Math.sqrt(deltaX*deltaX + deltaY*deltaY);
				
				//四舍五入，保留两位小数
				distance = Number(distance.toFixed(1));
				
				return distance;
			}
			
		]]>
	</fx:Script>
	
</supportClasses:MapToolButton>







